{"meta":{"title":"My Blog","subtitle":"博客","description":"","author":"李烨","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"线性表(Linear List)","slug":"线性表(Linear List)","date":"2020-04-02T10:25:13.197Z","updated":"2020-04-02T10:44:38.333Z","comments":true,"path":"2020/04/02/线性表(Linear List)/","link":"","permalink":"http://yoursite.com/2020/04/02/%E7%BA%BF%E6%80%A7%E8%A1%A8(Linear%20List)/","excerpt":"","text":"线性表(Linear List)由同类型数据元素构成有序序列的线性结构. 特征 表中元素个数为线性表长度. 线性表没有元素时称空表. 表起始位置为表头, 结束位置为表尾. 顺序结构线性表通过数组形式储存数据. 查找方便, 修改困难. 1234567`typedef struct LNode *List;` struct LNode&#123; ElementType Data[MAXSIZE]; int last; //指向表尾 &#125;;struct LNode L;List PtrL; 访问下标i的元素时: 1L.Data[i];/*或者*/PtrL-&gt;Data[i]; 主要操作 List MakeEmpty(): 初始化空表. 123456List MakeEmpty(void)&#123; List PtrL; PtrL = (List)malloc(sizeof(struct LNode)); PtrL-&gt;Last = -1; return PtrL;&#125; int Find(ElementType X, Lits L): 查找X第一次出现的位置. 12345678int Find(ElementType X, List PtrL)&#123; int i=0; while (i &lt;= PtrL -&gt; Last &amp;&amp; PtrL -&gt; Data[i] != X)&#123; i++; &#125;if (i &gt; PtrL -&gt; Last) return -1; //没找到返回-1. else return i;&#125; void Insert(ElementType X, int i, List L): 在i位数据前插入X元素. 1234567891011121314void Insert(ElementType X, int i , List PtrL)&#123; int j; if (PtrL -&gt; Last == MAXSIZE - 1)&#123; printf(\"表满\"); return ; &#125;if (i &lt; 1 || i &gt; PtrL -&gt; Last + 2)&#123; printf(\"位置不合法\"); return ; &#125;for (j = PtrL -&gt; Last; j &gt;= i - 1; j--)&#123; PrtL -&gt; Data[j+1] =PtrL -&gt; Data[j]; //把i位之前的数字都向后移动一位 &#125;PtrL -&gt; Data[i-1] = X; //新元素插入 PtrL -&gt; Last++; //Last还是指向最后一位元素 return ;&#125; void Delete (int i, List L): 删除第i个元素. 12345678910void Delete(int i, List PtrL)&#123; int j; if (i &lt; 1 || i &gt; PtrL -&gt; Last + 1)&#123; printf(\"不存在第%d个元素\"); return ; &#125;for (j = i; j &lt;= PtrL -&gt; Last; j++)&#123; PtrL -&gt; Data[j-1] =PtrL -&gt; Data[j]; //将i位之前的数字都向前移动一位 &#125;PtrL-&gt; Last --; //Last还是指向最后一位 return ;&#125; 链式结构线性表通过链表形式储存数据. 修改方便, 查找困难. 1234567typedef strcut LNode *List;struct LNode&#123; ElementType Data; List Next;&#125;;struct LNode L;List PtrL; 主要操作 int Length(List PtrL): 返回线性表长度. 123456789int Length(List PtrL)&#123; int j = 0; while (p)&#123; p = p -&gt; Next; j++; &#125; return j;&#125; List FindIth(int i, List PtrL): 寻找第i个数据的节点地址. 123456789List FindIth(int i, List PtrL)&#123; List p&#x3D; PtrL; int j &#x3D; 1; while (p !&#x3D; NULL &amp;&amp; j &lt; i)&#123; p &#x3D; p -&gt; Next; j++; &#125;if (j &#x3D;&#x3D; i) return p; &#x2F;&#x2F;返回第i位的数据地址 else return NULL; &#x2F;&#x2F;否则返回空&#125; List Find(ElementType X, List PtrL): 返回X元素所在的地址. 123456List Find(ElementType X, List PtrL)&#123; List p = PtrL; while (p != NULL &amp;&amp; p -&gt; Data != X)&#123; p = p -&gt; Next; &#125;return p;&#125; List Insert(ElementType X, List PtrL): 在第i位插入一个新元素. 12345678910111213141516171819List Insert(ElementType X,int i, List PtrL)&#123; List P, s; if (i == 1)&#123; s = (List)malloc(sizeof(struct LNode)); s -&gt; Data = x; s -&gt; Next = PtrL; return s; &#125;p = FindIth(i-1, PtrL); //寻找i-1的点是否存在 if (p == NULL)&#123; printf(\"参数不合法\"); return NULL &#125;else&#123; s = (List)malloc(sizeof(struct LNode)); s -&gt; Data = x; s -&gt; Next = p -&gt; Next; p -&gt; Next = s; return PtrL; //返回新链表的指针 &#125;&#125; List Delete(int i, List L): 删除第i位的元素. 12345678910111213141516171819202122List Delete(int i, List L)&#123; List p, s; if (i == 1)&#123; //如果要删除的是头节点 s = PtrL; if (PtrL != NULL) PtrL = PtrL -&gt; Next; else return NULL; free(s); return PtrL; &#125;p = FindIth(i-1,PtrL); //查找第i-1个节点 if (p == NULL)&#123; printf(\"第%d个节点不存在\",i - 1); return NULL; &#125;else if (p -&gt; Next == NULL)&#123; printf(\"第%d个节点不存在\",i); return NULL; &#125;else&#123; s = p -&gt; Next; p -&gt; Next = s -&gt; Next; free(s); return PtrL; &#125;&#125;","categories":[],"tags":[]}],"categories":[],"tags":[]}